language: shell
dist: focal 

services:
  - docker

env:
  global:
    - DB_NAME=liquibasedb
    - DB_USER=liquibase
    - DB_PASS=secret
    - DB_PORT=5432
    - DB_CONTAINER=pgdb

matrix:
  include:
    - name: "PostgreSQL 15"
      env: POSTGRES_VERSION=15-alpine
    - name: "PostgreSQL 14"
      env: POSTGRES_VERSION=14-alpine
    - name: "PostgreSQL 13"
      env: POSTGRES_VERSION=13-alpine

before_install:
  - sudo apt-get update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - docker --version
  - docker system prune -f || true
  - docker pull postgres:${POSTGRES_VERSION:-15-alpine}

script:
  - echo "[+] Starting PostgreSQL container..."
  - docker run --name $DB_CONTAINER -e POSTGRES_DB=$DB_NAME -e POSTGRES_USER=$DB_USER -e POSTGRES_PASSWORD=$DB_PASS -p $DB_PORT:5432 -d postgres:${POSTGRES_VERSION:-15-alpine}
  
  - echo "[+] Waiting for PostgreSQL to be ready..."
  - |
    for i in {1..30}; do
      if docker exec $DB_CONTAINER pg_isready -U $DB_USER; then
        echo "PostgreSQL is ready!"
        break
      fi
      if [ $i -eq 30 ]; then
        echo "PostgreSQL failed to start within 30 seconds"
        exit 1
      fi
      echo "Waiting for PostgreSQL to be ready... ($i/30)"
      sleep 1
    done

  - echo "[+] Creating database if it doesn't exist..."
  - docker exec $DB_CONTAINER psql -U $DB_USER -c "CREATE DATABASE $DB_NAME;" || true

  - echo "[+] Verifying database connection..."
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "SELECT 1;" || exit 1

  - echo "[+] Applying database schema..."
  - docker cp schema.sql $DB_CONTAINER:/tmp/schema.sql
  - |
    for i in {1..3}; do
      if docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -f /tmp/schema.sql; then
        echo "Schema applied successfully!"
        break
      fi
      if [ $i -eq 3 ]; then
        echo "Failed to apply schema after 3 attempts"
        exit 1
      fi
      echo "Retrying schema application... ($i/3)"
      sleep 2
    done

  - echo "[+] Verifying schema application..."
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" || exit 1

  - echo "========================================"
  - echo "=== DATABASE INSPECTION RESULTS ==="
  - echo "========================================"

  - echo "[+] === DATABASE TABLES ==="
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "
    SELECT table_name, table_type
    FROM information_schema.tables
    WHERE table_schema = 'public'
    ORDER BY table_name;
    "

  - echo "[+] === YOUR BUSINESS DATA ==="
  - echo "[+] Roles table:"
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "SELECT * FROM roles;"

  - echo "[+] Users table:"
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "SELECT id, username, email, created_at, last_login FROM users;"

  - echo "[+] User-Role relationships:"
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "
    SELECT u.username, r.name as role_name
    FROM users u
    JOIN user_roles ur ON u.id = ur.user_id
    JOIN roles r ON ur.role_id = r.id;
    "

  - echo "[+] === TABLE STRUCTURES ==="
  - echo "[+] Users table structure:"
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "\d users"

  - echo "[+] Roles table structure:"
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "\d roles"

  - echo "[+] User_roles table structure:"
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "\d user_roles"

  - echo "[+] === DATABASE CONSTRAINTS ==="
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "
    SELECT
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
    FROM
        information_schema.table_constraints AS tc
        JOIN information_schema.key_column_usage AS kcu
          ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
          ON ccu.constraint_name = tc.constraint_name
    WHERE tc.constraint_type = 'FOREIGN KEY'
    ORDER BY tc.table_name;
    "

  - echo "[+] === DATABASE INDEXES ==="
  - docker exec $DB_CONTAINER psql -U $DB_USER -d $DB_NAME -c "
    SELECT
        schemaname,
        tablename,
        indexname,
        indexdef
    FROM pg_indexes
    WHERE schemaname = 'public'
    ORDER BY tablename, indexname;
    "

  - echo "========================================"
  - echo "=== DATABASE INSPECTION COMPLETE ==="
  - echo "========================================"

after_script:
  - docker stop $DB_CONTAINER || true
  - docker rm $DB_CONTAINER || true

cache:
  directories:
    - $HOME/docker
  pip: true
  apt: true

branches:
  only:
    - master
